import kivy
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.metrics import cm
from kivy.clock import Clock
from kivy.uix.popup import Popup
from kivy.uix.scrollview import ScrollView
import datetime

# Dictionnaire des codes autorisés avec les prénoms correspondants
authorized_users = {
    "1111": "Alice",
    "2222": "Bob",
    "3333": "Charlie",
    "4444": "David"
}

class ClockApp(App):
    def build(self):
        self.input_code = ''  # Initialise la variable input_code
        self.login_log = {}  # Journal de connexion

        self.layout = BoxLayout(orientation='vertical', padding=20, spacing=20)

        # Label pour afficher la date
        self.date_label = Label(text=self.get_current_date())
        self.layout.add_widget(self.date_label)

        # Label pour afficher l'heure
        self.time_label = Label(text=self.get_current_time())
        self.layout.add_widget(self.time_label)

        # Label pour afficher le code saisi et le prénom correspondant
        self.input_label = Label(text='Code: ')
        self.layout.add_widget(self.input_label)

        # Créer les boutons du clavier numérique avec un padding à droite pour le décaler
        self.keyboard_layout = GridLayout(cols=3, rows=4, spacing=10, size_hint=(1, None), height=cm(7), padding=(cm(1.5), 0, 0, 0))
        self.layout.add_widget(self.keyboard_layout)

        for i in range(1, 10):
            button = Button(text=str(i), on_press=self.add_digit, size_hint=(None, None), size=(cm(1), cm(1)))
            self.keyboard_layout.add_widget(button)

        self.zero_button = Button(text='0', on_press=self.add_digit, size_hint=(None, None), size=(cm(1), cm(1)))
        self.keyboard_layout.add_widget(self.zero_button)

        self.del_button = Button(text='DEL', on_press=self.delete_digit, size_hint=(None, None), size=(cm(1), cm(1)))
        self.keyboard_layout.add_widget(self.del_button)

        self.enter_button = Button(text='ENTER', on_press=self.check_code, size_hint=(None, None), size=(cm(1), cm(1)))
        self.keyboard_layout.add_widget(self.enter_button)

        # Button pour afficher le journal de connexion avec une flèche de retour carrée de 1cm
        self.show_log_button = Button(text='↩', font_size=20, size_hint=(None, None), size=(cm(1), cm(1)), on_press=self.show_login_popup)
        self.layout.add_widget(self.show_log_button)

        # Rafraîchir l'heure et la date toutes les secondes
        Clock.schedule_interval(self.update_time_date, 1)

        return self.layout

    def get_current_time(self):
        return datetime.datetime.now().strftime("%H:%M:%S")

    def get_current_date(self):
        return datetime.datetime.now().strftime("%d-%m-%Y")

    def add_digit(self, instance):
        if len(self.input_code) < 4:
            self.input_code += instance.text
            self.input_label.text = 'Code: ' + '*' * len(self.input_code)

    def delete_digit(self, instance):
        self.input_code = self.input_code[:-1]
        self.input_label.text = 'Code: ' + '*' * len(self.input_code)

    def check_code(self, instance):
        if self.input_code:
            if self.input_code in authorized_users:
                user_name = authorized_users[self.input_code]
                self.input_label.text = f'Code valide pour {user_name}. Accès autorisé.'

                # Enregistrer l'heure et la date de la prise de service
                now = datetime.datetime.now()
                self.login_log[user_name] = now.strftime("%d-%m-%Y %H:%M:%S")

            else:
                self.input_label.text = 'Code invalide. Accès refusé.'
            self.input_code = ''

    def update_time_date(self, dt):
        self.time_label.text = self.get_current_time()
        self.date_label.text = self.get_current_date()

    def show_login_popup(self, instance):
        if self.input_code == '1313':
            # Créer le contenu du popup
            content = BoxLayout(orientation='vertical', padding=20, spacing=10)
            scroll_view = ScrollView()

            # Ajouter chaque entrée du journal de connexion au contenu du popup
            for user, login_time in self.login_log.items():
                login_entry = f'{user} - {login_time}'
                label = Label(text=login_entry)
                content.add_widget(label)

            scroll_view.add_widget(content)

            # Créer et afficher le popup avec une taille plus grande
            popup = Popup(title='Journal de connexion', content=scroll_view, size_hint=(None, None), size=(600, 400))
            popup.open()
        else:
            # Afficher un message d'accès refusé si le code n'est pas valide
            self.input_label.text = 'Accès refusé. Code invalide.'
        self.input_code = ''  # Réinitialiser le code après la vérification

if __name__ == '__main__':
    ClockApp().run()
